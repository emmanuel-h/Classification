<?php

namespace LIFO\ClassifBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends \Doctrine\ORM\EntityRepository
{
	public function pagination($page, $nbMaxParPage)
	{
		if (!is_numeric($page)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
					);
		}
	
		if ($page < 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas');
		}
	
		if (!is_numeric($nbMaxParPage)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
					);
		}
	
		$qb = $this->createQueryBuilder('u')
		->orderBy('u.username', 'ASC');
	
		$query = $qb->getQuery();
	
		$premierResultat = ($page - 1) * $nbMaxParPage;
		$query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
		$paginator = new Paginator($query);
	
		if ( ($paginator->count() <= $premierResultat) && $page != 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
		}
	
		return $paginator;
	}
}
