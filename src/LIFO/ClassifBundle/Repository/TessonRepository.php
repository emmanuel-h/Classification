<?php

namespace LIFO\ClassifBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use LIFO\ClassifBundle\Entity\Numerisation;

/**
 * TessonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TessonRepository extends \Doctrine\ORM\EntityRepository {
	
	public function findNumIsolationMax($us_id, $site_id) {
		$qb = $this->_em->createQueryBuilder('t')
		->select('MAX(t.numIsolation)')
		->from('LIFOClassifBundle:Tesson', 't')
		->leftJoin('t.us', 'u')
		->leftJoin('t.site', 's')
		->where('u.id=:us_id')
		->andWhere('s.id=:site_id')
		->setParameter('us_id', $us_id)
		->setParameter('site_id', $site_id);
		return $qb->getQuery()->getSingleScalarResult ();
	}
	
	public function paginationAvecParametres($page, $nbMaxParPage, $typeNumerisationChoisi, $typeClassifChoisi, $tessonsClasses){

		if (!is_numeric($page)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
					);
		}
		
		if ($page < 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas');
		}
		
		if (!is_numeric($nbMaxParPage)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
					);
		}
		
		
		$qb = $this->createQueryBuilder('t')
		->orderBy('t.id', 'ASC');
		
		if($typeNumerisationChoisi != "Aucune"){
			$qb ->leftJoin('t.numerisation', 'n')
				->leftJoin('n.typeNumerisation', 'tn')
				->andWhere('tn.nom=:typeNumerisation')
				->setParameter('typeNumerisation', $typeNumerisationChoisi);
		}
		if($typeClassifChoisi != "Aucune"){
			$qb ->leftJoin('t.typageEn', 'te')
				->leftJoin('te.typeClassification', 'tc')
				->andWhere('tc.nomType=:typeClassif')
				->setParameter('typeClassif', $typeClassifChoisi);
		}
		if($tessonsClasses == false){
			$qb ->leftjoin('t.typageEn', 'e')
				->andWhere('e.tesson is NULL');
		}
		
		$query = $qb->getQuery();
		
		$premierResultat = ($page - 1) * $nbMaxParPage;
		$query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
		$paginator = new Paginator($query);
	
		if ( ($paginator->count() <= $premierResultat) && $page != 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
		}
	
		return $paginator;
		
	}
	
	public function pagination($page, $nbMaxParPage)
	{
		if (!is_numeric($page)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
					);
		}
	
		if ($page < 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas');
		}
	
		if (!is_numeric($nbMaxParPage)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
					);
		}
	
		$qb = $this->createQueryBuilder('t')
		->leftjoin('t.typageEn', 'e')
		->where('e.tesson is NULL')
		->orderBy('t.id', 'ASC');
	
		$query = $qb->getQuery();
	
		$premierResultat = ($page - 1) * $nbMaxParPage;
		$query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
		$paginator = new Paginator($query);
	
		if ( ($paginator->count() <= $premierResultat) && $page != 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la premi�re page
		}
	
		return $paginator;
	}
	
	public function paginationNumerisations($page, $nbMaxParPage, $typeNumerisation)
	{
		if (!is_numeric($page)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
					);
		}
	
		if ($page < 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas');
		}
	
		if (!is_numeric($nbMaxParPage)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
					);
		}
	
		$qb = $this->createQueryBuilder('t')
		->leftJoin('t.numerisation', 'n')
		->leftJoin('n.typeNumerisation', 'tn')
		->where('tn.nom<>:typeNumerisation')
		->orWhere('n.tesson is null')
		->setParameter('typeNumerisation', $typeNumerisation)
		->orderBy('t.id', 'ASC');
	
		$query = $qb->getQuery();
	
		$premierResultat = ($page - 1) * $nbMaxParPage;
		$query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
		$paginator = new Paginator($query);
	
		if ( ($paginator->count() <= $premierResultat) && $page != 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la premi�re page
		}
	
		return $paginator;
	}
	
	public function findWithSpecificCriteria($criteres, $page, $nbMaxParPage){
		if (!is_numeric($page)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
					);
		}
		
		if ($page < 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas');
		}
		
		if (!is_numeric($nbMaxParPage)) {
			throw new InvalidArgumentException(
					'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
					);
		}

		$qb = $this->createQueryBuilder('t')
		->orderBy('t.id', 'ASC');
		if($criteres['codeINSEE'] != ""){
			$qb->leftJoin('t.site', 's1')
			->andWhere('s1.codeINSEE=:codeInsee')
			->setParameter('codeInsee', $criteres['codeINSEE']);
		}
		if($criteres['numeroSite'] != ""){
			$qb->leftJoin('t.site', 's2')
			->andWhere('s2.numSiteCommune=:numSite')
			->setParameter('numSite', $criteres['numeroSite']);
		}
		if($criteres['us'] != ""){
			$qb->leftJoin('t.us', 'u')
			->andWhere('u.nom=:us')
			->setParameter('us', $criteres['us']);
		}
		if($criteres['numeroIsolation'] != ""){
			$qb->andWhere('t.numIsolation=:numIsolation')
			->setParameter('numIsolation', $criteres['numeroIsolation']);
		}
		if($criteres['annee'] != ""){
			$qb->andWhere('t.annee=:annee')
			->setParameter('annee', $criteres['annee']);
		}
		if($criteres['developpe'] != ""){
			$qb->andWhere('t.developpe=:developpe')
			->setParameter('developpe', $criteres['developpe']);
		}
		
		$query = $qb->getQuery();
		
		$premierResultat = ($page - 1) * $nbMaxParPage;
		$query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
		$paginator = new Paginator($query);
	
		if ( ($paginator->count() <= $premierResultat) && $page != 1) {
			throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
		}
	
		return $paginator;
	}
}
